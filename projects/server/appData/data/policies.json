[
    {
        "name": "Server Pinning Validation",
        "description": "Validate that pinned servers respond with pinned metadata and tools",
        "origin": "server",
        "methods": ["initialize", "tools/list"],
        "conditions": [
            {
                "class": "pinning",
                "name": "Pinning Validation",
                "params": {
                    "validateInitialize": true,
                    "validateToolsList": true
                }
            }
        ],
        "actions": [
            {
                "class": "error",
                "params": {
                    "code": 32000,
                    "message": "Server did not match pinned server"
                }
            }
        ],
        "severity": 1,
        "enabled": true
    },
    {
        "name": "Cloud Account Secrets",
        "description": "Detect cloud provider access keys and secrets in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "AWS Access Key",
                "notes": "Matches AWS access key format",
                "params": {
                    "regex": "(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}"
                }
            },
            {
                "class": "regex",
                "name": "AWS Secret Key",
                "notes": "Matches AWS secret key format with keywords",
                "params": {
                    "regex": "[A-Za-z0-9/\\+=]{40}",
                    "keywords": ["AWS_SECRET_ACCESS_KEY", "secretAccessKey", "awsSecretKey", "secret_access_key"]
                }
            },
            {
                "class": "regex",
                "name": "Google Cloud API Key",
                "notes": "Matches Google Cloud API key format",
                "params": {
                    "regex": "AIza[0-9A-Za-z\\-_]{35}"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 1,
        "enabled": true
    },
    {
        "name": "GitHub Secrets",
        "description": "Detect GitHub tokens and secrets in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "GitHub PAT",
                "notes": "Matches GitHub PAT format",
                "params": {
                    "regex": "ghp_[0-9a-zA-Z]{36}"
                }
            },
            {
                "class": "regex",
                "name": "GitHub OAuth",
                "notes": "Matches GitHub OAuth token format",
                "params": {
                    "regex": "gho_[0-9a-zA-Z]{36}"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 1,
        "enabled": true
    },
    {
        "name": "Application Tokens",
        "description": "Detect application-specific tokens and webhooks in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "Slack Webhook",
                "notes": "Matches Slack webhook URL format",
                "params": {
                    "regex": "https://hooks\\.slack\\.com/services/[A-Za-z0-9/]{40,}"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 2,
        "enabled": true
    },
    {
        "name": "LLM API Keys",
        "description": "Detect LLM provider API keys in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "Anthropic API Key",
                "notes": "Matches Anthropic API key format",
                "params": {
                    "regex": "sk-ant-api-[a-zA-Z0-9_-]{32,}"
                }
            },
            {
                "class": "regex",
                "name": "OpenAI API Key",
                "notes": "Matches OpenAI API key format",
                "params": {
                    "regex": "sk-[a-zA-Z0-9]{48}"
                }
            },
            {
                "class": "regex",
                "name": "Hugging Face API Token",
                "notes": "Matches Hugging Face API token format",
                "params": {
                    "regex": "hf_[a-zA-Z0-9]{36}"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 1,
        "enabled": true
    },
    {
        "name": "General Secrets",
        "description": "Detect various general secret formats in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "JWT Token",
                "notes": "Matches Base64 encoded JWT format",
                "params": {
                    "regex": "eyJ[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+"
                }
            },
            {
                "class": "regex",
                "name": "PEM Private Key",
                "notes": "Matches PEM encoded private key format",
                "params": {
                    "regex": "-----BEGIN (RSA|DSA|EC|OPENSSH|PGP) PRIVATE KEY-----[\\s\\S]*?-----END (RSA|DSA|EC|OPENSSH|PGP) PRIVATE KEY-----"
                }
            },
            {
                "class": "regex",
                "name": "Prefixed Secrets",
                "notes": "Matches common secret patterns with prefixes",
                "params": {
                    "regex": "(API_KEY|CLIENT_SECRET|AUTH_TOKEN|PASSWORD|PRIVATE_KEY)[ =:\"]{0,3}([a-zA-Z0-9\\-_]{16,}|[A-Za-z0-9\\-_.~+=%@]{20,})"
                }
            },
            {
                "class": "regex",
                "name": "Bearer Token",
                "notes": "Matches Bearer token format",
                "params": {
                    "regex": "Bearer\\s[A-Za-z0-9\\-\\._~+/=]{20,}"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 1,
        "enabled": true
    },
    {
        "name": "PII Detection",
        "description": "Detect personally identifiable information in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "Email Address",
                "notes": "Matches email address format",
                "params": {
                    "regex": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
                }
            },
            {
                "class": "regex",
                "name": "SSN",
                "notes": "Matches Social Security Number format with keywords",
                "params": {
                    "regex": "\\b\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{4}\\b",
                    "keywords": ["SSN", "Social Security Number", "Tax ID", "TIN", "Employee ID", "EIN"]
                }
            },
            {
                "class": "regex",
                "name": "US Phone Number",
                "notes": "Matches US phone number format",
                "params": {
                    "regex": "(?:\\+1\\s?)?(?:\\d{3}[\\s.-]\\d{3}[\\s.-]\\d{4}|\\(\\d{3}\\)[\\s.-]?\\d{3}[\\s.-]?\\d{4})\\b"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 3,
        "enabled": true
    },
    {
        "name": "Credit Card Numbers",
        "description": "Detect credit card numbers in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "Visa",
                "notes": "Matches Visa card format and checksum",
                "params": {
                    "regex": "\\b4[0-9]{12}(?:[0-9]{3})?\\b",
                    "validator": "luhn"
                }
            },
            {
                "class": "regex",
                "name": "Mastercard",
                "notes": "Matches Mastercard format and checksum",
                "params": {
                    "regex": "\\b5[1-5][0-9]{14}\\b",
                    "validator": "luhn"
                }
            },
            {
                "class": "regex",
                "name": "American Express",
                "notes": "Matches Amex card format and checksum",
                "params": {
                    "regex": "\\b3[47][0-9]{13}\\b",
                    "validator": "luhn"
                }
            },
            {
                "class": "regex",
                "name": "Discover",
                "notes": "Matches Discover card format and checksum",
                "params": {
                    "regex": "\\b6(?:011|5[0-9]{2})[0-9]{12}\\b",
                    "validator": "luhn"
                }
            },
            {
                "class": "regex",
                "name": "Diners Club",
                "notes": "Matches Diners Club card format and checksum",
                "params": {
                    "regex": "\\b3(?:0[0-5]|[68][0-9])[0-9]{11}\\b",
                    "validator": "luhn"
                }
            },
            {
                "class": "regex",
                "name": "JCB",
                "notes": "Matches JCB card format and checksum",
                "params": {
                    "regex": "\\b(?:2131|1800|35[0-9]{3})[0-9]{11}\\b",
                    "validator": "luhn"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "redact",
                    "actionText": "[*]"
                }
            }
        ],
        "severity": 2,
        "enabled": true
    },
    {
        "name": "Internal Network Details",
        "description": "Detect private IP addresses in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "Private IP Address",
                "notes": "Matches RFC1918 private IP address ranges",
                "params": {
                    "regex": "\\b(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3})\\b"
                }
            }
        ],
        "actions": [
            {
                "class": "rewrite",
                "params": {
                    "action": "replace",
                    "actionText": "[REDACTED]"
                }
            }
        ],
        "severity": 4,
        "enabled": true
    },
    {
        "name": "UUID Detection",
        "description": "Detect UUIDs in messages",
        "origin": "either",
        "methods": ["tools/call"],
        "conditions": [
            {
                "class": "regex",
                "name": "UUID Pattern",
                "notes": "Matches UUID format",
                "params": {
                    "regex": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
                }
            }
        ],
        "severity": 5,
        "enabled": true
    }
]
